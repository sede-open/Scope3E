import { render } from '@testing-library/react';
import { MockedProvider } from '@apollo/client/testing';
import { Silver, SilverChalice } from 'styles/colours';

import { TotalLeverCard, IProps } from './TotalLeverCard';
import * as selectors from '../selectors';

const setup = (mocks: any, overrides: Partial<IProps> = {}) => {
  const props: IProps = {
    toggleContactModal: jest.fn(),
    emissionReduction: 1000,
    outstandingReductions: 500,
    achievedPercentageChange: -10.234,
    desiredPercentageChange: -12.986,
    disabled: false,
    ...overrides,
  };
  return render(
    <MockedProvider mocks={mocks} addTypename={false}>
      <TotalLeverCard {...props} />
    </MockedProvider>
  );
};

describe('TotalLeverCard', () => {
  it('should display emissions generated by swap fuels', () => {
    const { getByTestId } = setup([]);
    expect(getByTestId(selectors.simulationReductions).textContent).toContain(
      '1,000'
    );
  });

  it('should display outstanding emission reductions', () => {
    const { getByTestId } = setup([]);
    expect(
      getByTestId(selectors.simulationOutstandingReductions).textContent
    ).toContain('500');
  });

  it('should render progress arc', () => {
    const { getByTestId } = setup([]);
    expect(getByTestId(selectors.progressArcLine)).toBeInTheDocument();
    expect(
      getByTestId(selectors.achievedPercentageReduction).textContent
    ).toContain('10.2');
    expect(
      getByTestId(selectors.desiredPercentageReduction).textContent
    ).toContain('13');
  });

  it('should render a disabled state', async () => {
    const { getByTestId } = setup([], {
      achievedPercentageChange: 0,
      desiredPercentageChange: 0,
      emissionReduction: 0,
      outstandingReductions: 0,
      disabled: true,
    });

    expect(getByTestId(selectors.progressArcLine)).toHaveStyle(
      `stroke: ${Silver}`
    );
    expect(getByTestId(selectors.achievedPercentageReduction)).toHaveStyle(
      `color: ${SilverChalice}`
    );
    expect(getByTestId(selectors.simulationReductions)).toHaveStyle(
      `color: ${SilverChalice}`
    );
    expect(getByTestId(selectors.simulationOutstandingReductions)).toHaveStyle(
      `color: ${SilverChalice}`
    );

    expect(getByTestId(selectors.contactModalOpenBtn)).toBeDisabled();
  });
});
